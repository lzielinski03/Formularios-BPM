<?xml version="1.0" encoding="UTF-8"?>
<?fuego version="6.5.3" build="101199"?>
<component name="Formulario" description="" versionID="Version 6.5 " flags="cloneable replaceable" type="xobject">
	<inherit class="Any" flags="public"/>
	<inherit class="Fuego.Internal.FuegoObject" flags="public hidden"/>
	<inherit class="Fuego.Internal.XODelegate" flags="public delegated hidden"/>
	<objectProperty name="generateBitSets" value="true"/>
	<objectProperty name="generateStubs" value="true"/>
	<objectProperty name="packagePrefix" value="xobject"/>
	<attributes>
		<array type="FormPDF.Campo" name="campos" flags="hassetter hasgetter public" position="5"/>
		<String name="descripcion" flags="hassetter hasgetter public includeincheck" position="3"/>
		<String name="id" flags="hassetter hasgetter public includeincheck" position="2"/>
		<String name="nombre" flags="hassetter hasgetter public includeincheck" position="1"/>
		<String name="path" flags="hassetter hasgetter public includeincheck" position="4"/>
	</attributes>
	<methods>
		<method name="Formulario" flags="static clientavailable">
			<arg name="nombre" description="" flags="in" type="String"/>
			<outputArgument name="return" description="" flags="retval" type="FormPDF.Formulario"/>
			<sourceCode language="Java1">if (arg.nombre.trim().empty) throw new Exception(&quot;FormPDF Error: Argumento invalido para el constructor de Formulario. El nombre del formulario no puede estar vacio.&quot;);
this.nombre = arg.nombre;
this.getFormData();
this.getFormFields();</sourceCode>
		</method>
		<method name="addCampo" flags="clientavailable public">
			<arg name="campo" description="" flags="in" type="String"/>
			<arg name="valor" description="" flags="in" type="String"/>
			<variables>
				<variable name="index" type="Int"/>
			</variables>
			<sourceCode language="Java1">if (arg.campo.trim().empty || arg.campo == null) throw new Exception(&quot;Error in FormPDF addCampo. label no puede estar vacia&quot;);
// if already added throw exception

Campo newCampo = null;
foreach(field in this.campos) {
	if (field.label.toLowerCase() == arg.campo.toLowerCase()) {
		newCampo = (Campo)clone(field);
		index = this.campos.indexOf(element : field);
	}
}

if (newCampo == null) throw new Exception(&quot;Error in FormPDF addCampo. El campo que se intenta agregar, no se encuentra en el catalogo de la base de datos.&quot;);
if (newCampo.esRequerido &amp;&amp; arg.valor.trim().empty) throw new Exception(&quot;Error in FormPDF addCampo. El campo que se intenta agregar es requerido, el valor no puede estar vacio.&quot;);

this.campos[index].isAdded = true;
this.campos[index].valor = valor;</sourceCode>
		</method>
		<method name="generar" flags="clientavailable public">
			<sourceCode language="Java1">this.validateDataBeforeSend();


//send( this.id, this.nombre, this.descripcion, this.path, this.campos);</sourceCode>
		</method>
		<method name="getFormData" flags="public server disableclient">
			<variables>
				<variable name="queryResult" type="Iterator(Any[Any])"/>
			</variables>
			<sourceCode language="Java1">String query = &quot;select * from formulario where nombre = ?&quot;;

queryResult = DynamicSQL.executeQuery(sentence : query, implname : &quot;Mysql-Formularios&quot;, inParameters : { this.nombre } );

foreach(res in queryResult){
	this.id = (String)res[&quot;id&quot;];
	this.descripcion = (String)res[&quot;descripcion&quot;];
	this.path = (String)res[&quot;path&quot;];
}

if (this.id.trim().empty) throw new Exception(&quot;Error in FormPDF getFormData. id no puede estar vacio&quot;);
if (this.descripcion.trim().empty) throw new Exception(&quot;Error in FormPDF getFormData. descripcion no puede estar vacio&quot;);
if (this.path.trim().empty) throw new Exception(&quot;Error in FormPDF getFormData. path id no puede estar vacio&quot;);
</sourceCode>
		</method>
		<method name="getFormFields" flags="public server disableclient">
			<variables>
				<variable name="queryResult" type="Iterator(Any[Any])"/>
			</variables>
			<sourceCode language="Java1">if (this.id.trim().empty) throw new Exception(&quot;Error in FormPDF getFormFields. id no puede estar vacio&quot;);

String query = &quot;select * from campo where id_formulario = ?&quot;;
queryResult = DynamicSQL.executeQuery(sentence : query, implname : &quot;Mysql-Formularios&quot;, inParameters : { this.id } );

this.campos.clear();

foreach(res in queryResult){
	this.campos.extend(id : (String)res[&quot;id&quot;], id_formulario : (String)res[&quot;id_formulario&quot;], label : (String)res[&quot;label&quot;], esRequerido : (boolean)res[&quot;es_requerido&quot;]);
}</sourceCode>
		</method>
		<method name="validateDataBeforeSend" flags="clientavailable public">
			<sourceCode language="Java1">if (this.id == null || this.id.trim().empty) throw new RuntimeException(&quot;Error in FormPDF validateDataBeforeSend. id no puede estar vacio.&quot;);
if (this.nombre == null || this.nombre.trim().empty) throw new RuntimeException(&quot;Error in FormPDF validateDataBeforeSend. nombre no puede estar vacio.&quot;);
if (this.descripcion == null || this.descripcion.trim().empty) throw new RuntimeException(&quot;Error in FormPDF validateDataBeforeSend. descripcion no puede estar vacio.&quot;);
if (this.path == null || this.path.trim().empty) throw new RuntimeException(&quot;Error in FormPDF validateDataBeforeSend. path no puede estar vacio.&quot;);

foreach(campo in this.campos) {
	if(!campo.isAdded) throw new RuntimeException(&quot;Error in FormPDF validateDataBeforeSend. Campo &quot; + campo.label + &quot; no agregado.&quot;);
	if(campo.esRequerido &amp;&amp; campo.valor.trim().empty) throw new RuntimeException(&quot;Error in FormPDF validateDataBeforeSend.  Campo &quot; + campo.label + &quot; requerido.&quot;);
}</sourceCode>
		</method>
	</methods>
</component>
